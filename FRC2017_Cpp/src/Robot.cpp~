// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "pixy/pixyPacket.h"
#include "Timer.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<GearPickup> Robot::gearPickup;
std::shared_ptr<Drivetrain> Robot::drivetrain;
std::shared_ptr<Dumpster> Robot::dumpster;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
bool Robot::StopCommands;

void Robot::RobotInit() {

	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    intake.reset(new Intake());
    climber.reset(new Climber());
    gearPickup.reset(new GearPickup());
    drivetrain.reset(new Drivetrain());
    dumpster.reset(new Dumpster());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    StopCommands = false;

	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.

	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	//drivetrain->ResetEncoder();
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
	SmartDashboard::PutData(Scheduler::GetInstance());
	SmartDashboard::PutNumber("Front Right Encoder", drivetrain->frontRightEncoder->GetValue());
	SmartDashboard::PutNumber("Back Right Encoder", drivetrain->backRightEncoder->GetValue());
	SmartDashboard::PutNumber("Front Left Encoder",  drivetrain->frontLeftEncoder->GetValue());
	SmartDashboard::PutNumber("Back Left Encoder", drivetrain->backLeftEncoder->GetValue());

	SmartDashboard::PutNumber("Left Ultra", gearPickup->LeftUltraDistance());
		SmartDashboard::PutNumber("Right Ultra", gearPickup->RightUltraDistance());
		SmartDashboard::PutNumber("Angle", gearPickup->CalcAngle(gearPickup->LeftUltraDistance(), gearPickup->RightUltraDistance()));
		SmartDashboard::PutNumber("Packets Found", gearPickup->GetPacketsFound());

	#ifdef DEBUG
		gearPickup->PrintValules();
		SmartDashboard::PutData(Scheduler::GetInstance());
		SmartDashboard::PutNumber("Left X" , Robot::oi->getLeftJoystick()->GetX());
		SmartDashboard::PutNumber("Left Y" , Robot::oi->getLeftJoystick()->GetY());
		SmartDashboard::PutNumber("Right X" , Robot::oi->getRightJoystick()->GetX());
	#endif
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	if(oi->GetButton10() && oi->GetButton9())
		StopCommands = true;
	else
		StopCommands = false;

	SmartDashboard::PutNumber("Gate State",gearPickup->currentGateState);

	Scheduler::GetInstance()->Run();
	gearPickup->ReadPixyData();
	//Robot::drivetrain->DriveControl(0, 0, 0.1, false, true);
	//TurnToAngle();

	drivetrain->targetAngle = SmartDashboard::GetNumber("Target Angle", 0);
	SmartDashboard::PutNumber("Current Angle", drivetrain->pidgeotto->GetFusedHeading());
	SmartDashboard::PutNumber("yTranslation", gearPickup->yTranslation);
	SmartDashboard::PutNumber("xTranslation", gearPickup->xTranslation);

	SmartDashboard::PutNumber("Front Right Encoder", drivetrain->frontRightEncoder->GetValue());
	SmartDashboard::PutNumber("Back Right Encoder", drivetrain->backRightEncoder->GetValue());
	SmartDashboard::PutNumber("Front Left Encoder",  drivetrain->frontLeftEncoder->GetValue());
	SmartDashboard::PutNumber("Back Left Encoder", drivetrain->backLeftEncoder->GetValue());
	SmartDashboard::PutNumber("Distance from Center", (double)gearPickup->DistanceFromCenter());
	SmartDashboard::PutNumber("Left Ultra", gearPickup->LeftUltraDistance());
	SmartDashboard::PutNumber("Right Ultra", gearPickup->RightUltraDistance());
	SmartDashboard::PutNumber("Angle", gearPickup->CalcAngle(gearPickup->LeftUltraDistance(), gearPickup->RightUltraDistance()));
	SmartDashboard::PutNumber("Packets Found", gearPickup->GetPacketsFound());

#ifdef DEBUG
	gearPickup->PrintValules();
	SmartDashboard::PutData(Scheduler::GetInstance());
	SmartDashboard::PutNumber("Left X" , Robot::oi->getLeftJoystick()->GetX());
	SmartDashboard::PutNumber("Left Y" , Robot::oi->getLeftJoystick()->GetY());
	SmartDashboard::PutNumber("Right X" , Robot::oi->getRightJoystick()->GetX());
#endif

}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

