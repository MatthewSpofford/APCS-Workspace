// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "PigeonImu.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::intakeintakeRollerController;
std::shared_ptr<SpeedController> RobotMap::climberclimberMotorController;
std::shared_ptr<Ultrasonic> RobotMap::gearPickupultrasonic1;
std::shared_ptr<Ultrasonic> RobotMap::gearPickupultrasonic2;
std::shared_ptr<Servo> RobotMap::gearPickupleftGateServo;
std::shared_ptr<Servo> RobotMap::gearPickuprightGateServo;
std::shared_ptr<Servo> RobotMap::gearPickupleftPushServo;
std::shared_ptr<Servo> RobotMap::gearPickuprightPushServo;
std::shared_ptr<CANTalon> RobotMap::drivetrainfrontRightTurnMotor;
std::shared_ptr<CANTalon> RobotMap::drivetrainfrontRightMoveMotor;
std::shared_ptr<AnalogInput> RobotMap::drivetrainfrontRightEncoder;
std::shared_ptr<CANTalon> RobotMap::drivetrainfrontLeftTurnMotor;
std::shared_ptr<CANTalon> RobotMap::drivetrainfrontLeftMoveMotor;
std::shared_ptr<AnalogInput> RobotMap::drivetrainfrontLeftEncoder;
std::shared_ptr<CANTalon> RobotMap::drivetrainbackRightTurnMotor;
std::shared_ptr<CANTalon> RobotMap::drivetrainbackRightMoveMotor;
std::shared_ptr<AnalogInput> RobotMap::drivetrainbackRightEncoder;
std::shared_ptr<CANTalon> RobotMap::drivetrainbackLeftTurnMotor;
std::shared_ptr<CANTalon> RobotMap::drivetrainbackLeftMoveMotor;
std::shared_ptr<AnalogInput> RobotMap::drivetrainbackLeftEncoder;
std::shared_ptr<SpeedController> RobotMap::dumpsterdumpMotor;
std::shared_ptr<Servo> RobotMap::dumpsterdumpServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<PowerDistributionPanel> RobotMap::pdb;
std::shared_ptr<Ultrasonic> RobotMap::drivetrainUltrasonic1;
std::shared_ptr<Ultrasonic> RobotMap::drivetrainUltrasonic2;
std::shared_ptr<PigeonImu> RobotMap::pidgey;
//std::shared_ptr<Servo> RobotMap::cameraServo;
std::shared_ptr<DigitalInput> RobotMap::climberclimberLimitSwtich;
std::shared_ptr<Encoder> RobotMap::drivetrainDistEncoder;

std::shared_ptr<DigitalInput> RobotMap::gearPickupPushEncLimit;
std::shared_ptr<Counter> RobotMap::gearPickupPushEncoder;
std::shared_ptr<Spark> RobotMap::gearPickupPushMotor;
std::shared_ptr<CANTalon> RobotMap::shooterUpperShooterMotor;
std::shared_ptr<Spark> RobotMap::shooterLowerShooterMotor;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    intakeintakeRollerController.reset(new VictorSP(0));
    lw->AddActuator("Intake", "intakeRollerController", std::static_pointer_cast<VictorSP>(intakeintakeRollerController));
    
    climberclimberMotorController.reset(new TalonSRX(7));
    lw->AddActuator("Climber", "climberMotorController", std::static_pointer_cast<TalonSRX>(climberclimberMotorController));
    
    gearPickupultrasonic1.reset(new Ultrasonic(1, 2));
    lw->AddSensor("GearPickup", "ultrasonic 1", gearPickupultrasonic1);
    
    //gearPickupultrasonic2.reset(new Ultrasonic(3, 4));
    //lw->AddSensor("GearPickup", "ultrasonic 2", gearPickupultrasonic2);
    
    gearPickupleftGateServo.reset(new Servo(3));
    lw->AddActuator("GearPickup", "leftGateServo", gearPickupleftGateServo);
    
    gearPickuprightGateServo.reset(new Servo(4));
    lw->AddActuator("GearPickup", "rightGateServo", gearPickuprightGateServo);
    
    gearPickupleftPushServo.reset(new Servo(5));
    lw->AddActuator("GearPickup", "leftPushServo", gearPickupleftPushServo);
    
    gearPickuprightPushServo.reset(new Servo(6));
    lw->AddActuator("GearPickup", "rightPushServo", gearPickuprightPushServo);
    
    drivetrainfrontRightTurnMotor.reset(new CANTalon(1));
    lw->AddActuator("Drivetrain", "frontRightTurnMotor", drivetrainfrontRightTurnMotor);
    
    drivetrainfrontRightMoveMotor.reset(new CANTalon(5));
    lw->AddActuator("Drivetrain", "frontRightMoveMotor", drivetrainfrontRightMoveMotor);
    
    drivetrainfrontRightEncoder.reset(new AnalogInput(0));
    lw->AddSensor("Drivetrain", "frontRightEncoder", drivetrainfrontRightEncoder);
    
    drivetrainfrontLeftTurnMotor.reset(new CANTalon(2));
    lw->AddActuator("Drivetrain", "frontLeftTurnMotor", drivetrainfrontLeftTurnMotor);
    
    drivetrainfrontLeftMoveMotor.reset(new CANTalon(6));
    lw->AddActuator("Drivetrain", "frontLeftMoveMotor", drivetrainfrontLeftMoveMotor);
    
    drivetrainfrontLeftEncoder.reset(new AnalogInput(1));
    lw->AddSensor("Drivetrain", "frontLeftEncoder", drivetrainfrontLeftEncoder);
    
    drivetrainbackRightTurnMotor.reset(new CANTalon(4));
    lw->AddActuator("Drivetrain", "backRightTurnMotor", drivetrainbackRightTurnMotor);
    
    drivetrainbackRightMoveMotor.reset(new CANTalon(8));
    lw->AddActuator("Drivetrain", "backRightMoveMotor", drivetrainbackRightMoveMotor);
    
    drivetrainbackRightEncoder.reset(new AnalogInput(3));
    lw->AddSensor("Drivetrain", "backRightEncoder", drivetrainbackRightEncoder);
    
    drivetrainbackLeftTurnMotor.reset(new CANTalon(3));
    lw->AddActuator("Drivetrain", "backLeftTurnMotor", drivetrainbackLeftTurnMotor);
    
    drivetrainbackLeftMoveMotor.reset(new CANTalon(7));
    lw->AddActuator("Drivetrain", "backLeftMoveMotor", drivetrainbackLeftMoveMotor);
    
    drivetrainbackLeftEncoder.reset(new AnalogInput(2));
    lw->AddSensor("Drivetrain", "backLeftEncoder", drivetrainbackLeftEncoder);
    
//    dumpsterdumpMotor.reset(new Spark(8));
//    lw->AddActuator("Dumpster", "dumpMotor", std::static_pointer_cast<Spark>(dumpsterdumpMotor));
    
    dumpsterdumpServo.reset(new Servo(9));
    lw->AddActuator("Dumpster", "dumpServo", dumpsterdumpServo);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    pdb.reset(new PowerDistributionPanel(0));

    pidgey.reset(new PigeonImu(9));
//  cameraServo.reset(new Servo(2));

    climberclimberLimitSwtich.reset(new DigitalInput(9));
    lw->AddActuator("Climber", "Limit Switch", climberclimberLimitSwtich);

    drivetrainDistEncoder.reset(new Encoder(5, 6, false, CounterBase::k4X));
    lw->AddSensor("Drivetrain", "Distance Encoder", drivetrainDistEncoder);

    gearPickupPushEncoder.reset(new Counter(Counter::kAnalogInputs));
    gearPickupPushEncoder->SetDownSource(new DigitalInput(4));
    lw->AddSensor("Gear Pickup", "Push Encoder", gearPickupPushEncoder);

    gearPickupPushMotor.reset(new Spark(1));
    lw->AddActuator("Gear Pickup", "Push Motor", gearPickupPushMotor);

    gearPickupPushEncLimit.reset(new DigitalInput(3));
    lw->AddSensor("Gear Pickup", "Push Limit Switch", gearPickupPushEncLimit);

    shooterUpperShooterMotor.reset(new CANTalon(10));
    lw->AddActuator("Shooter", "Upper Shooter Motor", shooterUpperShooterMotor);
    shooterLowerShooterMotor.reset(new Spark(8));
    lw->AddActuator("Shooter", "Lower Shooter Motor", shooterLowerShooterMotor);
}
