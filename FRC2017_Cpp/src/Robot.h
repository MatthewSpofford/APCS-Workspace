// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

//#define USE_COUNTER

#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "pixy/pixyI2C.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/Climber.h"
#include "Subsystems/Drivetrain.h"
#include "Subsystems/Dumpster.h"
#include "Subsystems/GearPickup.h"
#include "Subsystems/Intake.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Subsystems/Shooter.h"

#include "OI.h"
class Robot : public IterativeRobot {
public:
	std::unique_ptr<Command> autonomousCommand;
	static std::unique_ptr<OI> oi;
	LiveWindow *lw = LiveWindow::GetInstance();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static std::shared_ptr<Intake> intake;
    static std::shared_ptr<Climber> climber;
    static std::shared_ptr<GearPickup> gearPickup;
    static std::shared_ptr<Drivetrain> drivetrain;
    static std::shared_ptr<Dumpster> dumpster;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static std::shared_ptr<Shooter> shooter;

	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();

	static bool StopCommands;
	static int autoPosition;
	static int autoMode;
	static int alliance; //kRed, kBlue, kInvalid

	static CameraServer camera;
	static FILE* turnFile;

	const int DISTANCE_ENCODER_DIO_PIN = 5;
	static std::shared_ptr<DigitalInput> distanceEncoder;
	static std::shared_ptr<Counter> distanceCounter;

	static double GetDistanceTraveled();
	static void ResetCounter();
private:
	void RunCounter();
	const double COUNTER_NUM = 6;
	static double distance;
	static int lastValue;
};
#endif
