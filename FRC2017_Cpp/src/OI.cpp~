// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoPlaceGear.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/Drive.h"
#include "Commands/ManualPlaceGear.h"
#include "Commands/MoveToGear.h"
#include "Commands/ParallelToWall.h"
#include "Commands/ParallelToWallWithGyro.h"
#include "Commands/TurnToAngle.h"
#include "Commands/climbWinch.h"
#include "Commands/closeGate.h"
#include "Commands/departFromLift.h"
#include "Commands/intakeBalls.h"
#include "Commands/openGate.h"
#include "Commands/pushGear.h"
#include "Commands/departFromLift.h"
#include "Commands/intakeCommand.h"
#include "Commands/reconfigEncoder.h"
#include "Commands/tempCommand.h"
#include "Commands/unwindWinch.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "Commands/DumpBalls.h"

OI::OI() {
    // Process operator interface input here.
    xboxController.reset(new Joystick(2));
    
    selectButton.reset(new JoystickButton(xboxController.get(), 7));
    selectButton->WhenPressed(new pushGear(false));
    leftBumper.reset(new JoystickButton(xboxController.get(), 5));
    leftBumper->WhenPressed(new closeGate(false));
    rightBumper.reset(new JoystickButton(xboxController.get(), 6));
    rightBumper->WhenPressed(new openGate(false));
    joystickButton2.reset(new JoystickButton(xboxController.get(), 10));
    joystickButton2->WhenPressed(new tempCommand());
    yButton.reset(new JoystickButton(xboxController.get(), 4));
    yButton->WhileHeld(new climbWinch());
    joystickButton1.reset(new JoystickButton(xboxController.get(), 9));
    joystickButton1->WhenPressed(new tempCommand());
    aButton.reset(new JoystickButton(xboxController.get(), 1));
    aButton->WhileHeld(new unwindWinch());
    startButton.reset(new JoystickButton(xboxController.get(), 8));
    startButton->WhenPressed(new tempCommand());
    rightJoystick.reset(new Joystick(1));
    
    leftJoystick.reset(new Joystick(0));
    
    recalibrateWheels.reset(new JoystickButton(leftJoystick.get(), 11));
    recalibrateWheels->WhileHeld(new reconfigEncoder());

    // SmartDashboard Buttons

    SmartDashboard::PutData("intakeBalls", new intakeBalls());
    SmartDashboard::PutData("pushGear: buttonPress", new pushGear(false));
    SmartDashboard::PutData("closeGate: buttonPress", new closeGate(false));
    SmartDashboard::PutData("openGate: buttonPress", new openGate(false));
    SmartDashboard::PutData("TurnToAngle", new TurnToAngle(0));
    SmartDashboard::PutData("intakeCommand", new intakeCommand());
    SmartDashboard::PutData("ParallelToWallWithGyro", new ParallelToWallWithGyro(14));
    SmartDashboard::PutData("departFromLift", new departFromLift());
    SmartDashboard::PutData("reconfigEncoder", new reconfigEncoder());
    SmartDashboard::PutData("ParallelToWall", new ParallelToWall());
    SmartDashboard::PutData("AutoPlaceGear", new AutoPlaceGear());
    SmartDashboard::PutData("tempCommand", new tempCommand());
    SmartDashboard::PutData("unwindWinch", new unwindWinch());
    SmartDashboard::PutData("climbWinch", new climbWinch());
    SmartDashboard::PutData("Drive", new Drive());
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    SmartDashboard::PutData("pushGear", new pushGear(false));
    SmartDashboard::PutData("closeGate", new closeGate(false));
    SmartDashboard::PutData("openGate", new openGate(false));

    startButton->WhenPressed(new DumpBalls());
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getLeftJoystick() {
   return leftJoystick;
}

std::shared_ptr<Joystick> OI::getRightJoystick() {
   return rightJoystick;
}

std::shared_ptr<Joystick> OI::getxboxController() {
   return xboxController;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

bool OI::GetButton9()
{
	return joystickButton1->Get();
}

bool OI::GetButton10()
{
	return joystickButton2->Get();
}

bool OI::GetStartButton()
{
	return startButton->Get();
}
