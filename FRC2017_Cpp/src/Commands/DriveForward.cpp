// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveForward.h"
#include "TurnWheels.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveForward::DriveForward(double m_speed, double m_distance, bool m_fieldCentric, double m_angle): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	fieldCentric = m_fieldCentric;
	speed = m_speed;
	angle = m_angle;
	distance = m_distance;

	startDistance = 0;
#ifndef USE_COUNTER
	SetTimeout(m_distance);
#endif
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveForward::Initialize() {
//	if(Robot::gearPickup->CompletedWallParallel == FAILURE)
//		DriveForward::Cancel();
	wheelCommand = new TurnWheels(0,1.0);
	wheelCommand->Start();
	Robot::drivetrain->ResetDistEnc();
}

// Called repeatedly when this Command is scheduled to run
void DriveForward::Execute() {
#ifndef USE_COUNTER
	if(!(IsTimedOut() && Robot::gearPickup->CompletedWallParallel == FAILURE))
#else
	if(!(wheelCommand->IsRunning() && Robot::gearPickup->CompletedWallParallel == FAILURE && Robot::drivetrain->GetDistanceTraveled() >= distance))
#endif
	{
		if(angle == -999)
			Robot::drivetrain->DriveControl(-speed, 0.0, 0.0, fieldCentric, true);
		else
			Robot::drivetrain->DriveControl(-speed, 0.0, Robot::drivetrain->TurnToAngle(angle), fieldCentric, true);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool DriveForward::IsFinished() {
#ifdef USE_COUNTER
    return Robot::drivetrain->GetDistanceTraveled() - startDistance >= distance || Robot::gearPickup->CompletedWallParallel == FAILURE;
#else
    return IsTimedOut() || Robot::gearPickup->CompletedWallParallel == FAILURE;
#endif
}

// Called once after isFinished returns true
void DriveForward::End() {
	Robot::drivetrain->StopDrive();
	Robot::drivetrain->ResetEncoder();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveForward::Interrupted() {
	Robot::drivetrain->StopDrive();
	Robot::drivetrain->ResetEncoder();
}
