// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ParallelToWall.h"
#include "TurnToAngle.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ParallelToWall::ParallelToWall(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::gearPickup.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ParallelToWall::Initialize() {
	//SetTimeout(10);

	if(Robot::gearPickup->LeftUltraDistance() >= 136 || Robot::gearPickup->RightUltraDistance() >= 136)
	{
		Robot::drivetrain->IgnoreJoystickInput(false);
		Robot::gearPickup->CompletedWallParallel = FAILURE;
		isFinished = true;
		ParallelToWall::Cancel();
	}
	else
		Robot::drivetrain->IgnoreJoystickInput(true);
}

// Called repeatedly when this Command is scheduled to run
void ParallelToWall::Execute() {
	if(!Robot::StopCommands || !Robot::gearPickup->GetBadPixyData())
	{
		if(!Robot::gearPickup->IsCorrectlyDistanced(Robot::gearPickup->ALIGN_PHASE_1_DIS))
		{
			Robot::gearPickup->AlignRobot(Robot::gearPickup->ALIGN_PHASE_1_DIS);
		}
		else
		{
			Robot::drivetrain->StopDrive();
			phase1Complete = true;
			isFinished = true;
			Robot::gearPickup->CompletedWallParallel = SUCCESS;
		}

		/*if(phase1Complete && !Robot::gearPickup->IsCorrectlyDistanced(Robot::gearPickup->ALIGN_PHASE_2_DIS))
			Robot::gearPickup->AlignRobot(Robot::gearPickup->ALIGN_PHASE_1_DIS);
		else if(phase1Complete && !isFinished && Robot::gearPickup->IsCorrectlyDistanced(Robot::gearPickup->ALIGN_PHASE_2_DIS))
		{
			isFinished = true;
		}*/
	}
	else
	{
		isFinished = true;
		Robot::gearPickup->CompletedWallParallel = FAILURE;
	}
}
// Make this return true when this Command no longer needs to run execute()
bool ParallelToWall::IsFinished() {
    return isFinished || Robot::StopCommands;// || Robot::gearPickup->CompletedWallParallel == FAILURE;
}

// Called once after isFinished returns true
void ParallelToWall::End() {
#ifndef DEBUG
	if(Robot::gearPickup->CompletedWallParallel == UNASSIGNED)
		Robot::gearPickup->CompletedWallParallel = SUCCESS;
#endif
	Robot::drivetrain->StopDrive();
	if(Robot::gearPickup->GetBadPixyData())
		DriverStation::ReportError("PIXY FAILURE IN COMPLETEING ALIGNMENT");
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ParallelToWall::Interrupted() {
#ifndef DEBUG
	Robot::gearPickup->CompletedWallParallel = FAILURE;
#endif
	Robot::drivetrain->StopDrive();
}
