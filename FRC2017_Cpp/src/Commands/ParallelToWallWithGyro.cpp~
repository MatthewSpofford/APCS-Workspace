// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ParallelToWallWithGyro.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ParallelToWallWithGyro::ParallelToWallWithGyro(double targetY): Command() {
    m_targetY = targetY;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ParallelToWallWithGyro::Initialize() {
	if(Robot::gearPickup->LeftUltraDistance() >= 136 || Robot::gearPickup->RightUltraDistance() >= 136)
		{
			Robot::drivetrain->IgnoreJoystickInput(false);
			Robot::gearPickup->CompletedWallParallel = FAILURE;
			isFinished = true;
			ParallelToWallWithGyro::Cancel();
		}
		else
			Robot::drivetrain->IgnoreJoystickInput(true);
}

// Called repeatedly when this Command is scheduled to run
void ParallelToWallWithGyro::Execute() {
	if(!Robot::StopCommands || !Robot::gearPickup->GetBadPixyData())
		{
			if((Robot::gearPickup->LeftUltraDistance()!= 0 && Robot::gearPickup->LeftUltraDistance() > m_targetY) ||
					(Robot::gearPickup->RightUltraDistance()!= 0 && Robot::gearPickup->RightUltraDistance() > m_targetY))
			{
				Robot::gearPickup->MoveTo(m_targetY);
			}
			else
			{
				Robot::drivetrain->StopDrive();
				isFinished = true;
				Robot::gearPickup->CompletedWallParallel = SUCCESS;
			}
		}
		else
		{
			isFinished = true;
			Robot::gearPickup->CompletedWallParallel = FAILURE;
		}
}

// Make this return true when this Command no longer needs to run execute()
bool ParallelToWallWithGyro::IsFinished() {
	Robot::gearPickup->badPacketCount = 0;
	 return isFinished || Robot::StopCommands;
}

// Called once after isFinished returns true
void ParallelToWallWithGyro::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ParallelToWallWithGyro::Interrupted() {

}
