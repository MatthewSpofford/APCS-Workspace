// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "TurnToAngle.h"
#include "stdio.h"
static FILE *logfile = 0;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

TurnToAngle::TurnToAngle(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void TurnToAngle::Initialize() {


	logfile = fopen("/tmp/4048New.log", "w");
	targetAngle = 30;
}

// Called repeatedly when this Command is scheduled to run
void TurnToAngle::Execute() {
	double currentAngle = Robot::drivetrain->pidgeotto->GetFusedHeading();
	double xyz_dps[3];
	Robot::drivetrain->pidgeotto->GetRawGyro(xyz_dps);
	double currentAngularRate =xyz_dps[2];
	double z = 0;
	if(!(abs(targetAngle - currentAngle) <= ANGLE_MARGIN))
	{
		z = (targetAngle - currentAngle)/750 + 0.08;
		//divide by 750 to get range from 0 to 0.04, then add 0.08 - we found the ideal range of speeds to be 0.08 to 0.12
	}
	else
	{
		z = 0;
		isFinished = true;
	}

	SmartDashboard::PutNumber("z", z);
	if (logfile) {
		fprintf(logfile, "%f, \n", z);
		fflush(logfile);
	}

	Robot::drivetrain->DriveControl(0, 0, z, false, true);



}

// Make this return true when this Command no longer needs to run execute()
bool TurnToAngle::IsFinished() {
    return isFinished;
}

// Called once after isFinished returns true
void TurnToAngle::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TurnToAngle::Interrupted() {

}
