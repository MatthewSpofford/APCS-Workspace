// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "climbWinch.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

climbWinch::climbWinch(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::climber.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void climbWinch::Initialize() {
	SmartDashboard::PutBoolean("DB/Button 0", false);
	Robot::climber->StopWinch();
}

// Called repeatedly when this Command is scheduled to run
void climbWinch::Execute() {
	/*
	double matchTimer=Timer::GetMatchTime();
	if (matchTimer>=120) { //This ensures that the robot cannot use the climber until the last 30 seconds of match U*/
		Robot::climber->WindWinch();
		Robot::climber->climbTriggered = true;
	//}
}

// Make this return true when this Command no longer needs to run execute()
bool climbWinch::IsFinished() {
	double currentVoltage=RobotMap::pdb->GetCurrent(Robot::climber->WINCH_PDB_VALUE);
	return (currentVoltage >= Robot::climber->MAX_VOLTAGE) && TimeSinceInitialized() >= 00.25;
}

// Called once after isFinished returns true
void climbWinch::End() {
	Robot::climber->StopWinch();
	Robot::climber->climbTriggered = false;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void climbWinch::Interrupted() {
	Robot::climber->StopWinch();
	Robot::climber->climbTriggered = false;
}
