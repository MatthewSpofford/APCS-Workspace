// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Drive.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Drive::Drive(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Drive::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void Drive::Execute() {


	Robot::drivetrain->swerveDrive->SetMode(RobotDriveSwerve::DriveMode::kRobotCentric);
	Robot::drivetrain->swerveDrive->SwerveDrive(Robot::oi->getLeftJoystick()->GetY(),
												Robot::oi->getLeftJoystick()->GetX(),
												Robot::oi->getRightJoystick()->GetX());
//	if(!Robot::drivetrain->GetIgnoreInput())
		/*
		bool reverseY = SmartDashboard::GetBoolean("DB/Button 0", false);
		bool reverseX = SmartDashboard::GetBoolean("DB/Button 1", false);
		double speedY = SmartDashboard::GetNumber("DB/Slider 0", 0);
		double speedX = SmartDashboard::GetNumber("DB/Slider 1", 0);

		speedX *= reverseX ? -1 : 1;
		speedY *= reverseY ? -1 : 1;

		Robot::drivetrain->DriveControl(speedY, speedX, 0.0);
		*/
//		Robot::drivetrain->DriveControl(Robot::oi->getLeftJoystick()->GetY(),
//		Robot::oi->getLeftJoystick()->GetX(), Robot::oi->getRightJoystick()->GetX(), -Robot::drivetrain->fieldCentric);

}

// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Drive::End() {
	Robot::drivetrain->swerveDrive->StopMotor();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted() {
	Robot::drivetrain->swerveDrive->StopMotor();
}
