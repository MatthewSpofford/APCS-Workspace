// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "pushGear.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

pushGear::pushGear(bool startInAuto): Command() {
    m_startInAuto = startInAuto;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::gearPickup.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void pushGear::Initialize() {
	if((Robot::gearPickup->CompletedWallParallel == SUCCESS ||  Robot::gearPickup->CompletedWallParallel == RUNNING) && !m_startInAuto)
		pushGear::Cancel();
}

// Called repeatedly when this Command is scheduled to run
void pushGear::Execute() {
	if(!(Robot::StopCommands && IsTimedOut() && Robot::StopCommands && Robot::gearPickup->CompletedWallParallel == FAILURE))
	{
		if(Robot::gearPickup->PassedOpenDelay() && Robot::gearPickup->currentGateState == OPEN)
		{
			Robot::gearPickup->Push();
			if(!timeoutTriggered)
			{
				SetTimeout(Robot::gearPickup->PUSH_DELAY);
				timeoutTriggered = true;
			}
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool pushGear::IsFinished() {
	return Robot::StopCommands || IsTimedOut() || Robot::gearPickup->CompletedWallParallel == FAILURE;
}

// Called once after isFinished returns true
void pushGear::End() {
	Robot::gearPickup->UnPush();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void pushGear::Interrupted() {
	Robot::gearPickup->UnPush();
}
