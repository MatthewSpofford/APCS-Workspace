// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "pushGear.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

pushGear::pushGear(bool startInAuto): Command() {
    m_startInAuto = startInAuto;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	//Requires(Robot::gearPickup.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	end = false;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void pushGear::Initialize() {
	end = false;
	if((Robot::gearPickup->CompletedWallParallel == SUCCESS ||  Robot::gearPickup->CompletedWallParallel == RUNNING) && !m_startInAuto)
		Cancel();

}

// Called repeatedly when this Command is scheduled to run
void pushGear::Execute() {
	SmartDashboard::PutBoolean("Stop Commands", Robot::StopCommands);
	SmartDashboard::PutNumber("Compl Wall Parl.", Robot::gearPickup->CompletedWallParallel);
	SmartDashboard::PutBoolean("AutoPlace Triggered", Robot::gearPickup->autoPlaceTriggered);
	SmartDashboard::PutBoolean("openTrigger", Robot::gearPickup->openTriggered);
	SmartDashboard::PutBoolean("closeTrigger", Robot::gearPickup->closeTriggered);
	SmartDashboard::PutBoolean("PassedOpenDelay",Robot::gearPickup->PassedOpenDelay());
	if(!(Robot::StopCommands || Robot::gearPickup->CompletedWallParallel == FAILURE
		 || Robot::gearPickup->autoPlaceTriggered || Robot::gearPickup->openTriggered || Robot::gearPickup->closeTriggered
		 || Robot::gearPickup->currentGateState != OPEN))
	{
		DriverStation::ReportError("Running PUSH");
		Robot::gearPickup->pushTriggered = true;
		if(Robot::gearPickup->GetShoveAngle() < Robot::gearPickup->SHOVER_END_VAL && Robot::gearPickup->ShoverState != 2)
		{
			Robot::gearPickup->ShoverForward();
			if(Robot::gearPickup->GetShoveAngle() > Robot::gearPickup->SHOVER_MID_VAL)
				Robot::gearPickup->Push();
		}
		else if(Robot::gearPickup->ShoverState != 2)
		{
			Robot::gearPickup->ShoverState = 2;
			Robot::gearPickup->ShoverStop();
		}
		else if(Robot::gearPickup->ShoverState == 2 && !Robot::gearPickup->GetShoveLimit())
		{
			Robot::gearPickup->ShoverReverse();
		}
		else if(Robot::gearPickup->ShoverState == 2)
		{
			Robot::gearPickup->ShoverState = 0;
			Robot::gearPickup->ResetShoveAngle();
			Robot::gearPickup->ShoverStop();
			end = true;
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool pushGear::IsFinished() {
	return Robot::StopCommands || Robot::gearPickup->CompletedWallParallel == FAILURE
			 || Robot::gearPickup->autoPlaceTriggered || Robot::gearPickup->openTriggered || Robot::gearPickup->closeTriggered
			 || Robot::gearPickup->currentGateState != OPEN || end;
}

// Called once after isFinished returns true
void pushGear::End() {
	Robot::gearPickup->ShoverStop();
	timeoutTriggered = false;
	Robot::gearPickup->pushTriggered = false;
	Robot::gearPickup->UnPush();
	DriverStation::ReportError("ENDING");
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run`1
void pushGear::Interrupted() {
	Robot::gearPickup->ShoverStop();
	Robot::gearPickup->pushTriggered = false;
	timeoutTriggered = false;
	Robot::gearPickup->UnPush();
	DriverStation::ReportError("INTERUPT");
}
