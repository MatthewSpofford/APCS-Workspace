// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShoverPosition.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShoverPosition::ShoverPosition(bool m_pushGear): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::gearPickup.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	pushGear = m_pushGear;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShoverPosition::Initialize() {
	SetTimeout(3.0);
	if(pushGear && Robot::gearPickup->ShoverState >= 1)
		Cancel();
}

// Called repeatedly when this Command is scheduled to run
void ShoverPosition::Execute() {
	printf("%d %d %d\n", Robot::StopCommands, end, IsTimedOut());
	if(!Robot::StopCommands && !end && !IsTimedOut() && !Robot::gearPickup->pushTriggered)
	{
		switch(Robot::gearPickup->ShoverState)
		{
		case 0:
			if(!end && Robot::gearPickup->GetShoveAngle() < Robot::gearPickup->SHOVER_MID_VAL)
			{
				Robot::gearPickup->ShoverForward();
			}
			else
				end = true;
			break;
		case 1:
			if(!end && (Robot::gearPickup->GetShoveLimit()))
			{
					Robot::gearPickup->ShoverReverse();
			}
			else
				end = true;
			break;
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ShoverPosition::IsFinished() {
    return end || IsTimedOut() || Robot::StopCommands || Robot::gearPickup->pushTriggered;
}
// Called once after isFinished returns true
void ShoverPosition::End() {
	if(!end)
	{
		//Do nothing
	}
	else if(Robot::gearPickup->ShoverState >= 1)
	{
		Robot::gearPickup->ShoverState = 0;
		Robot::gearPickup->ResetShoveAngle();
	}
	else
	{
		Robot::gearPickup->ShoverState++;
	}

	Robot::gearPickup->ShoverStop();
	end = false;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShoverPosition::Interrupted() {
	Robot::gearPickup->ShoverStop();
	end = false;
}
